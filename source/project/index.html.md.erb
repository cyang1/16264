---
title: Humanoids Final Project
---

<header>
# Stereo Imaging <span>Humanoids Final Project</span>
</header>
### Jeff Chen (jchen4), Cary Yang (caryy)

#### Introduction

Stereo imaging is the determination of depth information from pairs of images of the same scene from different perspectives. It is particularly interesting due to the fact that live depth information can be derived using conventional, inexpensive webcams, and can replace expensive, specialty hardware, like the Kinect. Stereo imaging is a complex problem, and involves three main steps, rectification, correspondence, and reprojection.

#### Rectification

Stereo rectification is the process of mathematically row-aligning images. Here, row-aligned means that the cameras are coplanar, and that each row of the images have the same y-coordinate. Note that it would be exceedingly difficult, though possible, to align two identical cameras to be coplanar to skip this step.

<aside>
<div class="figure">
  <%= image_tag 'rectification.png' %>
  <h4 class="figure-title">Figure 1: Rectification process</h4>
</div>
</aside>

Stereo rectification need only be run one time for a given camera setup. However, it must be run on a scene with distinctive characteristics. Generally, a chessboard is suitable for this, since one can easily find the corners of the chessboard. Going forward, we will assume that we are working with two undistorted images of the same scene, whose primary component is a non-square chessboard with easily distinguishable corners. Let's call the vectors storing these corners *C1* and *C2*, where the position of each corner is the same in each vector. Also, we will assign *(x, y)* coordinates for each corner, starting with *(0, 0)* at the top left corner through *(w - 1, h - 1)* for the bottom right.

Next, we introduce two matrices: the essential matrix *E* and the fundamental matrix *F*. The essential matrix *E* contains information about the translation *T* and rotation *R* that describe the location of the second camera in relation to the first. The fundamental matrix *F* contains the same information, as well as the intrinsics for both cameras, which encompass focal length, image format, and principal point. OpenCV provides the function `cv::findFundamentalMat()`, which, when given the two sets of corners, outputs the fundamental matrix of that particular setup. Assuming more than 8 points are output, OpenCV will use the RANSAC algorithm to find the matrix. In our case, since we used two of the same camera, the camera intrinsics are basically equivalent, so we do not need to adjust for this.

<aside>

<div class="figure">
  <%= image_tag 'tsucuba_left.png' %>
  <h4 class="figure-title">Figure 2: Rectified left-eye image</h4>
</div>

<p></p>

<div class="figure">
  <%= image_tag 'tsucuba_right.png' %>
  <h4 class="figure-title">Figure 3: Rectified right-eye image</h4>
</div>

<p></p>

<div class="figure">
  <%= image_tag 'tsucuba_sgbm_bs1_md64.png' %>
  <h4 class="figure-title">Figure 4: Result</h4>
  Lighter is closer, darker is further away, black is undefined (couldn't find a disparity result for that pixel). The undefined disparities in this image are mostly due to occlusion.
</div>

</aside>

The next step is to find matrices that will row-align the images. For this, we use Bouguet's algorithm, which attempts to minimze distortion while maximizing common viewing area given the essential matrix. To minimize distortion, we split the rotation matrix *R* in half, so each image rotates half of *R* to align their planes. This rotation makes the images coplanar, but not row-aligned. Next, we compute the recitified left and right camera matrices, as well as projection matrices *Pl* and *Pr*. From these, we can calculate the reprojection matrix *Q*, which will come in handy later. OpenCV provides the functions `cv::StereoRectify()` and `cv::initUndistortRectifyMap()`,which do the above steps, and output the matrices necessary to row-align a pair of images.

#### Correspondence

Stereo correspondence matches features in the left and right images, outputting a disparity which is the difference in x-coordinates of the feature viewed in the two cameras.

The stereo correspondence algorithm used in our implementation is semi-global block matching, which we found to be an adequate balance of runtime and accuracy. Whereas classic block matching simply matches windows around a pixel against other windows in some search space, which is inherently local, semi-global block matching defines a cost function *C(p, d)*, which is the closer to 0 if the pixel *p* in one image is very similar to the pixel at disparity *d* in the second image, and then attempts to minimize the aggregated costs along multiple paths for a given disparity (usually 8, equally spaced around the pixel). The disparity for which this aggregated cost is minimized is chosen as the disparity at that pixel.

In OpenCV, semi-global block matching is performed by constructing a `cv::StereoSGBM` functor and calling it with parameters `left_img, right_img, output_disparity`, where `output_disparity` is the image where the disparity results that are calculated are placed.

#### Reprojection

Since we have calculated the reprojection matrix *Q* in the rectification step, it is a simple matter to find the depth of a point *(x, y)* with disparity *d*: we multiply *Q* and the matrix *[[x] [y] [d] [1]]* to obtain *[[X] [Y] [Z] [W]]*, where the final 3D coordinates are *(X/W, Y/W, Z/W)*. OpenCV provides the function `cv::reprojectImageTo3D()`, which takes a disparity image and reprojection matrix and transforms each pixel's *(x, y)* coordinates to the corresponding 3D point.

#### Further Research

1. Our rectification process seems very brittle, producing useful matrices only about 50% of the time. This could be due to a variety of factors, such as how far apart our webcams were, the distance of the checkerboard from the cameras, or maybe the orientation of each of the cameras. If we continued this project, we would look into the reasons behind this issue.
2. Alternative stereo correspondence algorithms to produce more accurate results.

<div id="download-btn-container">
  <a href="stereo_cam_project.zip" class="btn blue" role="button">
    <i class="icon ion-code-download"></i>
    Download Our Code
  </a>
</div>
